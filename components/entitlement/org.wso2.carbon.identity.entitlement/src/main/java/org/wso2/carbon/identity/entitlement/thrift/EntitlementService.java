/**
 * Copyright (c) 2022, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * WSO2 Inc. licenses this file to you under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *
 * Autogenerated by Thrift Compiler (0.16.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
 
package org.wso2.carbon.identity.entitlement.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.16.0)", date = "2022-05-23")
public class EntitlementService {

  public interface Iface {

    public java.lang.String getDecision(java.lang.String request, java.lang.String sessionId) throws EntitlementException, org.apache.thrift.TException;

    public java.lang.String getDecisionByAttributes(java.lang.String subject, java.lang.String resource, java.lang.String action, java.util.List<java.lang.String> environment, java.lang.String sessionId) throws EntitlementException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getDecision(java.lang.String request, java.lang.String sessionId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void getDecisionByAttributes(java.lang.String subject, java.lang.String resource, java.lang.String action, java.util.List<java.lang.String> environment, java.lang.String sessionId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public java.lang.String getDecision(java.lang.String request, java.lang.String sessionId) throws EntitlementException, org.apache.thrift.TException
    {
      send_getDecision(request, sessionId);
      return recv_getDecision();
    }

    public void send_getDecision(java.lang.String request, java.lang.String sessionId) throws org.apache.thrift.TException
    {
      getDecision_args args = new getDecision_args();
      args.setRequest(request);
      args.setSessionId(sessionId);
      sendBase("getDecision", args);
    }

    public java.lang.String recv_getDecision() throws EntitlementException, org.apache.thrift.TException
    {
      getDecision_result result = new getDecision_result();
      receiveBase(result, "getDecision");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ee != null) {
        throw result.ee;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getDecision failed: unknown result");
    }

    public java.lang.String getDecisionByAttributes(java.lang.String subject, java.lang.String resource, java.lang.String action, java.util.List<java.lang.String> environment, java.lang.String sessionId) throws EntitlementException, org.apache.thrift.TException
    {
      send_getDecisionByAttributes(subject, resource, action, environment, sessionId);
      return recv_getDecisionByAttributes();
    }

    public void send_getDecisionByAttributes(java.lang.String subject, java.lang.String resource, java.lang.String action, java.util.List<java.lang.String> environment, java.lang.String sessionId) throws org.apache.thrift.TException
    {
      getDecisionByAttributes_args args = new getDecisionByAttributes_args();
      args.setSubject(subject);
      args.setResource(resource);
      args.setAction(action);
      args.setEnvironment(environment);
      args.setSessionId(sessionId);
      sendBase("getDecisionByAttributes", args);
    }

    public java.lang.String recv_getDecisionByAttributes() throws EntitlementException, org.apache.thrift.TException
    {
      getDecisionByAttributes_result result = new getDecisionByAttributes_result();
      receiveBase(result, "getDecisionByAttributes");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ee != null) {
        throw result.ee;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getDecisionByAttributes failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getDecision(java.lang.String request, java.lang.String sessionId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getDecision_call method_call = new getDecision_call(request, sessionId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getDecision_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String request;
      private java.lang.String sessionId;
      public getDecision_call(java.lang.String request, java.lang.String sessionId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.request = request;
        this.sessionId = sessionId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getDecision", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getDecision_args args = new getDecision_args();
        args.setRequest(request);
        args.setSessionId(sessionId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws EntitlementException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getDecision();
      }
    }

    public void getDecisionByAttributes(java.lang.String subject, java.lang.String resource, java.lang.String action, java.util.List<java.lang.String> environment, java.lang.String sessionId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getDecisionByAttributes_call method_call = new getDecisionByAttributes_call(subject, resource, action, environment, sessionId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getDecisionByAttributes_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String subject;
      private java.lang.String resource;
      private java.lang.String action;
      private java.util.List<java.lang.String> environment;
      private java.lang.String sessionId;
      public getDecisionByAttributes_call(java.lang.String subject, java.lang.String resource, java.lang.String action, java.util.List<java.lang.String> environment, java.lang.String sessionId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.subject = subject;
        this.resource = resource;
        this.action = action;
        this.environment = environment;
        this.sessionId = sessionId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getDecisionByAttributes", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getDecisionByAttributes_args args = new getDecisionByAttributes_args();
        args.setSubject(subject);
        args.setResource(resource);
        args.setAction(action);
        args.setEnvironment(environment);
        args.setSessionId(sessionId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws EntitlementException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getDecisionByAttributes();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getDecision", new getDecision());
      processMap.put("getDecisionByAttributes", new getDecisionByAttributes());
      return processMap;
    }

    public static class getDecision<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getDecision_args> {
      public getDecision() {
        super("getDecision");
      }

      public getDecision_args getEmptyArgsInstance() {
        return new getDecision_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public getDecision_result getResult(I iface, getDecision_args args) throws org.apache.thrift.TException {
        getDecision_result result = new getDecision_result();
        try {
          result.success = iface.getDecision(args.request, args.sessionId);
        } catch (EntitlementException ee) {
          result.ee = ee;
        }
        return result;
      }
    }

    public static class getDecisionByAttributes<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getDecisionByAttributes_args> {
      public getDecisionByAttributes() {
        super("getDecisionByAttributes");
      }

      public getDecisionByAttributes_args getEmptyArgsInstance() {
        return new getDecisionByAttributes_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public getDecisionByAttributes_result getResult(I iface, getDecisionByAttributes_args args) throws org.apache.thrift.TException {
        getDecisionByAttributes_result result = new getDecisionByAttributes_result();
        try {
          result.success = iface.getDecisionByAttributes(args.subject, args.resource, args.action, args.environment, args.sessionId);
        } catch (EntitlementException ee) {
          result.ee = ee;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getDecision", new getDecision());
      processMap.put("getDecisionByAttributes", new getDecisionByAttributes());
      return processMap;
    }

    public static class getDecision<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getDecision_args, java.lang.String> {
      public getDecision() {
        super("getDecision");
      }

      public getDecision_args getEmptyArgsInstance() {
        return new getDecision_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            getDecision_result result = new getDecision_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getDecision_result result = new getDecision_result();
            if (e instanceof EntitlementException) {
              result.ee = (EntitlementException) e;
              result.setEeIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getDecision_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.getDecision(args.request, args.sessionId,resultHandler);
      }
    }

    public static class getDecisionByAttributes<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getDecisionByAttributes_args, java.lang.String> {
      public getDecisionByAttributes() {
        super("getDecisionByAttributes");
      }

      public getDecisionByAttributes_args getEmptyArgsInstance() {
        return new getDecisionByAttributes_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            getDecisionByAttributes_result result = new getDecisionByAttributes_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getDecisionByAttributes_result result = new getDecisionByAttributes_result();
            if (e instanceof EntitlementException) {
              result.ee = (EntitlementException) e;
              result.setEeIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getDecisionByAttributes_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.getDecisionByAttributes(args.subject, args.resource, args.action, args.environment, args.sessionId,resultHandler);
      }
    }

  }

  public static class getDecision_args implements org.apache.thrift.TBase<getDecision_args, getDecision_args._Fields>, java.io.Serializable, Cloneable, Comparable<getDecision_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDecision_args");

    private static final org.apache.thrift.protocol.TField REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("request", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SESSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getDecision_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getDecision_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String request; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String sessionId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST((short)1, "request"),
      SESSION_ID((short)2, "sessionId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST
            return REQUEST;
          case 2: // SESSION_ID
            return SESSION_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST, new org.apache.thrift.meta_data.FieldMetaData("request", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SESSION_ID, new org.apache.thrift.meta_data.FieldMetaData("sessionId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDecision_args.class, metaDataMap);
    }

    public getDecision_args() {
    }

    public getDecision_args(
      java.lang.String request,
      java.lang.String sessionId)
    {
      this();
      this.request = request;
      this.sessionId = sessionId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDecision_args(getDecision_args other) {
      if (other.isSetRequest()) {
        this.request = other.request;
      }
      if (other.isSetSessionId()) {
        this.sessionId = other.sessionId;
      }
    }

    public getDecision_args deepCopy() {
      return new getDecision_args(this);
    }

    @Override
    public void clear() {
      this.request = null;
      this.sessionId = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getRequest() {
      return this.request;
    }

    public getDecision_args setRequest(@org.apache.thrift.annotation.Nullable java.lang.String request) {
      this.request = request;
      return this;
    }

    public void unsetRequest() {
      this.request = null;
    }

    /** Returns true if field request is set (has been assigned a value) and false otherwise */
    public boolean isSetRequest() {
      return this.request != null;
    }

    public void setRequestIsSet(boolean value) {
      if (!value) {
        this.request = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getSessionId() {
      return this.sessionId;
    }

    public getDecision_args setSessionId(@org.apache.thrift.annotation.Nullable java.lang.String sessionId) {
      this.sessionId = sessionId;
      return this;
    }

    public void unsetSessionId() {
      this.sessionId = null;
    }

    /** Returns true if field sessionId is set (has been assigned a value) and false otherwise */
    public boolean isSetSessionId() {
      return this.sessionId != null;
    }

    public void setSessionIdIsSet(boolean value) {
      if (!value) {
        this.sessionId = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case REQUEST:
        if (value == null) {
          unsetRequest();
        } else {
          setRequest((java.lang.String)value);
        }
        break;

      case SESSION_ID:
        if (value == null) {
          unsetSessionId();
        } else {
          setSessionId((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST:
        return getRequest();

      case SESSION_ID:
        return getSessionId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case REQUEST:
        return isSetRequest();
      case SESSION_ID:
        return isSetSessionId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof getDecision_args)
        return this.equals((getDecision_args)that);
      return false;
    }

    public boolean equals(getDecision_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_request = true && this.isSetRequest();
      boolean that_present_request = true && that.isSetRequest();
      if (this_present_request || that_present_request) {
        if (!(this_present_request && that_present_request))
          return false;
        if (!this.request.equals(that.request))
          return false;
      }

      boolean this_present_sessionId = true && this.isSetSessionId();
      boolean that_present_sessionId = true && that.isSetSessionId();
      if (this_present_sessionId || that_present_sessionId) {
        if (!(this_present_sessionId && that_present_sessionId))
          return false;
        if (!this.sessionId.equals(that.sessionId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetRequest()) ? 131071 : 524287);
      if (isSetRequest())
        hashCode = hashCode * 8191 + request.hashCode();

      hashCode = hashCode * 8191 + ((isSetSessionId()) ? 131071 : 524287);
      if (isSetSessionId())
        hashCode = hashCode * 8191 + sessionId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getDecision_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetRequest(), other.isSetRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.request, other.request);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetSessionId(), other.isSetSessionId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSessionId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionId, other.sessionId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getDecision_args(");
      boolean first = true;

      sb.append("request:");
      if (this.request == null) {
        sb.append("null");
      } else {
        sb.append(this.request);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sessionId:");
      if (this.sessionId == null) {
        sb.append("null");
      } else {
        sb.append(this.sessionId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (request == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'request' was not present! Struct: " + toString());
      }
      if (sessionId == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'sessionId' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDecision_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getDecision_argsStandardScheme getScheme() {
        return new getDecision_argsStandardScheme();
      }
    }

    private static class getDecision_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getDecision_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDecision_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.request = iprot.readString();
                struct.setRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SESSION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.sessionId = iprot.readString();
                struct.setSessionIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDecision_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.request != null) {
          oprot.writeFieldBegin(REQUEST_FIELD_DESC);
          oprot.writeString(struct.request);
          oprot.writeFieldEnd();
        }
        if (struct.sessionId != null) {
          oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
          oprot.writeString(struct.sessionId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDecision_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getDecision_argsTupleScheme getScheme() {
        return new getDecision_argsTupleScheme();
      }
    }

    private static class getDecision_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getDecision_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDecision_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        oprot.writeString(struct.request);
        oprot.writeString(struct.sessionId);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDecision_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.request = iprot.readString();
        struct.setRequestIsSet(true);
        struct.sessionId = iprot.readString();
        struct.setSessionIdIsSet(true);
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getDecision_result implements org.apache.thrift.TBase<getDecision_result, getDecision_result._Fields>, java.io.Serializable, Cloneable, Comparable<getDecision_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDecision_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField EE_FIELD_DESC = new org.apache.thrift.protocol.TField("ee", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getDecision_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getDecision_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String success; // required
    public @org.apache.thrift.annotation.Nullable EntitlementException ee; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EE((short)1, "ee");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EE
            return EE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EE, new org.apache.thrift.meta_data.FieldMetaData("ee", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, EntitlementException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDecision_result.class, metaDataMap);
    }

    public getDecision_result() {
    }

    public getDecision_result(
      java.lang.String success,
      EntitlementException ee)
    {
      this();
      this.success = success;
      this.ee = ee;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDecision_result(getDecision_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetEe()) {
        this.ee = new EntitlementException(other.ee);
      }
    }

    public getDecision_result deepCopy() {
      return new getDecision_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ee = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getSuccess() {
      return this.success;
    }

    public getDecision_result setSuccess(@org.apache.thrift.annotation.Nullable java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public EntitlementException getEe() {
      return this.ee;
    }

    public getDecision_result setEe(@org.apache.thrift.annotation.Nullable EntitlementException ee) {
      this.ee = ee;
      return this;
    }

    public void unsetEe() {
      this.ee = null;
    }

    /** Returns true if field ee is set (has been assigned a value) and false otherwise */
    public boolean isSetEe() {
      return this.ee != null;
    }

    public void setEeIsSet(boolean value) {
      if (!value) {
        this.ee = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      case EE:
        if (value == null) {
          unsetEe();
        } else {
          setEe((EntitlementException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EE:
        return getEe();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EE:
        return isSetEe();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof getDecision_result)
        return this.equals((getDecision_result)that);
      return false;
    }

    public boolean equals(getDecision_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ee = true && this.isSetEe();
      boolean that_present_ee = true && that.isSetEe();
      if (this_present_ee || that_present_ee) {
        if (!(this_present_ee && that_present_ee))
          return false;
        if (!this.ee.equals(that.ee))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEe()) ? 131071 : 524287);
      if (isSetEe())
        hashCode = hashCode * 8191 + ee.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getDecision_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetEe(), other.isSetEe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ee, other.ee);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getDecision_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ee:");
      if (this.ee == null) {
        sb.append("null");
      } else {
        sb.append(this.ee);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDecision_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getDecision_resultStandardScheme getScheme() {
        return new getDecision_resultStandardScheme();
      }
    }

    private static class getDecision_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getDecision_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDecision_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ee = new EntitlementException();
                struct.ee.read(iprot);
                struct.setEeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDecision_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ee != null) {
          oprot.writeFieldBegin(EE_FIELD_DESC);
          struct.ee.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDecision_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getDecision_resultTupleScheme getScheme() {
        return new getDecision_resultTupleScheme();
      }
    }

    private static class getDecision_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getDecision_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDecision_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetEe()) {
          struct.ee.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDecision_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ee = new EntitlementException();
          struct.ee.read(iprot);
          struct.setEeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getDecisionByAttributes_args implements org.apache.thrift.TBase<getDecisionByAttributes_args, getDecisionByAttributes_args._Fields>, java.io.Serializable, Cloneable, Comparable<getDecisionByAttributes_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDecisionByAttributes_args");

    private static final org.apache.thrift.protocol.TField SUBJECT_FIELD_DESC = new org.apache.thrift.protocol.TField("subject", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField RESOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("resource", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField ACTION_FIELD_DESC = new org.apache.thrift.protocol.TField("action", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField ENVIRONMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("environment", org.apache.thrift.protocol.TType.LIST, (short)4);
    private static final org.apache.thrift.protocol.TField SESSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionId", org.apache.thrift.protocol.TType.STRING, (short)5);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getDecisionByAttributes_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getDecisionByAttributes_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String subject; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String resource; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String action; // required
    public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> environment; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String sessionId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUBJECT((short)1, "subject"),
      RESOURCE((short)2, "resource"),
      ACTION((short)3, "action"),
      ENVIRONMENT((short)4, "environment"),
      SESSION_ID((short)5, "sessionId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SUBJECT
            return SUBJECT;
          case 2: // RESOURCE
            return RESOURCE;
          case 3: // ACTION
            return ACTION;
          case 4: // ENVIRONMENT
            return ENVIRONMENT;
          case 5: // SESSION_ID
            return SESSION_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUBJECT, new org.apache.thrift.meta_data.FieldMetaData("subject", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.RESOURCE, new org.apache.thrift.meta_data.FieldMetaData("resource", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ACTION, new org.apache.thrift.meta_data.FieldMetaData("action", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ENVIRONMENT, new org.apache.thrift.meta_data.FieldMetaData("environment", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.SESSION_ID, new org.apache.thrift.meta_data.FieldMetaData("sessionId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDecisionByAttributes_args.class, metaDataMap);
    }

    public getDecisionByAttributes_args() {
    }

    public getDecisionByAttributes_args(
      java.lang.String subject,
      java.lang.String resource,
      java.lang.String action,
      java.util.List<java.lang.String> environment,
      java.lang.String sessionId)
    {
      this();
      this.subject = subject;
      this.resource = resource;
      this.action = action;
      this.environment = environment;
      this.sessionId = sessionId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDecisionByAttributes_args(getDecisionByAttributes_args other) {
      if (other.isSetSubject()) {
        this.subject = other.subject;
      }
      if (other.isSetResource()) {
        this.resource = other.resource;
      }
      if (other.isSetAction()) {
        this.action = other.action;
      }
      if (other.isSetEnvironment()) {
        java.util.List<java.lang.String> __this__environment = new java.util.ArrayList<java.lang.String>(other.environment);
        this.environment = __this__environment;
      }
      if (other.isSetSessionId()) {
        this.sessionId = other.sessionId;
      }
    }

    public getDecisionByAttributes_args deepCopy() {
      return new getDecisionByAttributes_args(this);
    }

    @Override
    public void clear() {
      this.subject = null;
      this.resource = null;
      this.action = null;
      this.environment = null;
      this.sessionId = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getSubject() {
      return this.subject;
    }

    public getDecisionByAttributes_args setSubject(@org.apache.thrift.annotation.Nullable java.lang.String subject) {
      this.subject = subject;
      return this;
    }

    public void unsetSubject() {
      this.subject = null;
    }

    /** Returns true if field subject is set (has been assigned a value) and false otherwise */
    public boolean isSetSubject() {
      return this.subject != null;
    }

    public void setSubjectIsSet(boolean value) {
      if (!value) {
        this.subject = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getResource() {
      return this.resource;
    }

    public getDecisionByAttributes_args setResource(@org.apache.thrift.annotation.Nullable java.lang.String resource) {
      this.resource = resource;
      return this;
    }

    public void unsetResource() {
      this.resource = null;
    }

    /** Returns true if field resource is set (has been assigned a value) and false otherwise */
    public boolean isSetResource() {
      return this.resource != null;
    }

    public void setResourceIsSet(boolean value) {
      if (!value) {
        this.resource = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getAction() {
      return this.action;
    }

    public getDecisionByAttributes_args setAction(@org.apache.thrift.annotation.Nullable java.lang.String action) {
      this.action = action;
      return this;
    }

    public void unsetAction() {
      this.action = null;
    }

    /** Returns true if field action is set (has been assigned a value) and false otherwise */
    public boolean isSetAction() {
      return this.action != null;
    }

    public void setActionIsSet(boolean value) {
      if (!value) {
        this.action = null;
      }
    }

    public int getEnvironmentSize() {
      return (this.environment == null) ? 0 : this.environment.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<java.lang.String> getEnvironmentIterator() {
      return (this.environment == null) ? null : this.environment.iterator();
    }

    public void addToEnvironment(java.lang.String elem) {
      if (this.environment == null) {
        this.environment = new java.util.ArrayList<java.lang.String>();
      }
      this.environment.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<java.lang.String> getEnvironment() {
      return this.environment;
    }

    public getDecisionByAttributes_args setEnvironment(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> environment) {
      this.environment = environment;
      return this;
    }

    public void unsetEnvironment() {
      this.environment = null;
    }

    /** Returns true if field environment is set (has been assigned a value) and false otherwise */
    public boolean isSetEnvironment() {
      return this.environment != null;
    }

    public void setEnvironmentIsSet(boolean value) {
      if (!value) {
        this.environment = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getSessionId() {
      return this.sessionId;
    }

    public getDecisionByAttributes_args setSessionId(@org.apache.thrift.annotation.Nullable java.lang.String sessionId) {
      this.sessionId = sessionId;
      return this;
    }

    public void unsetSessionId() {
      this.sessionId = null;
    }

    /** Returns true if field sessionId is set (has been assigned a value) and false otherwise */
    public boolean isSetSessionId() {
      return this.sessionId != null;
    }

    public void setSessionIdIsSet(boolean value) {
      if (!value) {
        this.sessionId = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUBJECT:
        if (value == null) {
          unsetSubject();
        } else {
          setSubject((java.lang.String)value);
        }
        break;

      case RESOURCE:
        if (value == null) {
          unsetResource();
        } else {
          setResource((java.lang.String)value);
        }
        break;

      case ACTION:
        if (value == null) {
          unsetAction();
        } else {
          setAction((java.lang.String)value);
        }
        break;

      case ENVIRONMENT:
        if (value == null) {
          unsetEnvironment();
        } else {
          setEnvironment((java.util.List<java.lang.String>)value);
        }
        break;

      case SESSION_ID:
        if (value == null) {
          unsetSessionId();
        } else {
          setSessionId((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUBJECT:
        return getSubject();

      case RESOURCE:
        return getResource();

      case ACTION:
        return getAction();

      case ENVIRONMENT:
        return getEnvironment();

      case SESSION_ID:
        return getSessionId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUBJECT:
        return isSetSubject();
      case RESOURCE:
        return isSetResource();
      case ACTION:
        return isSetAction();
      case ENVIRONMENT:
        return isSetEnvironment();
      case SESSION_ID:
        return isSetSessionId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof getDecisionByAttributes_args)
        return this.equals((getDecisionByAttributes_args)that);
      return false;
    }

    public boolean equals(getDecisionByAttributes_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_subject = true && this.isSetSubject();
      boolean that_present_subject = true && that.isSetSubject();
      if (this_present_subject || that_present_subject) {
        if (!(this_present_subject && that_present_subject))
          return false;
        if (!this.subject.equals(that.subject))
          return false;
      }

      boolean this_present_resource = true && this.isSetResource();
      boolean that_present_resource = true && that.isSetResource();
      if (this_present_resource || that_present_resource) {
        if (!(this_present_resource && that_present_resource))
          return false;
        if (!this.resource.equals(that.resource))
          return false;
      }

      boolean this_present_action = true && this.isSetAction();
      boolean that_present_action = true && that.isSetAction();
      if (this_present_action || that_present_action) {
        if (!(this_present_action && that_present_action))
          return false;
        if (!this.action.equals(that.action))
          return false;
      }

      boolean this_present_environment = true && this.isSetEnvironment();
      boolean that_present_environment = true && that.isSetEnvironment();
      if (this_present_environment || that_present_environment) {
        if (!(this_present_environment && that_present_environment))
          return false;
        if (!this.environment.equals(that.environment))
          return false;
      }

      boolean this_present_sessionId = true && this.isSetSessionId();
      boolean that_present_sessionId = true && that.isSetSessionId();
      if (this_present_sessionId || that_present_sessionId) {
        if (!(this_present_sessionId && that_present_sessionId))
          return false;
        if (!this.sessionId.equals(that.sessionId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSubject()) ? 131071 : 524287);
      if (isSetSubject())
        hashCode = hashCode * 8191 + subject.hashCode();

      hashCode = hashCode * 8191 + ((isSetResource()) ? 131071 : 524287);
      if (isSetResource())
        hashCode = hashCode * 8191 + resource.hashCode();

      hashCode = hashCode * 8191 + ((isSetAction()) ? 131071 : 524287);
      if (isSetAction())
        hashCode = hashCode * 8191 + action.hashCode();

      hashCode = hashCode * 8191 + ((isSetEnvironment()) ? 131071 : 524287);
      if (isSetEnvironment())
        hashCode = hashCode * 8191 + environment.hashCode();

      hashCode = hashCode * 8191 + ((isSetSessionId()) ? 131071 : 524287);
      if (isSetSessionId())
        hashCode = hashCode * 8191 + sessionId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getDecisionByAttributes_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSubject(), other.isSetSubject());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSubject()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subject, other.subject);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetResource(), other.isSetResource());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetResource()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resource, other.resource);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetAction(), other.isSetAction());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAction()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.action, other.action);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetEnvironment(), other.isSetEnvironment());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEnvironment()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.environment, other.environment);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetSessionId(), other.isSetSessionId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSessionId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionId, other.sessionId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getDecisionByAttributes_args(");
      boolean first = true;

      sb.append("subject:");
      if (this.subject == null) {
        sb.append("null");
      } else {
        sb.append(this.subject);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("resource:");
      if (this.resource == null) {
        sb.append("null");
      } else {
        sb.append(this.resource);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("action:");
      if (this.action == null) {
        sb.append("null");
      } else {
        sb.append(this.action);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("environment:");
      if (this.environment == null) {
        sb.append("null");
      } else {
        sb.append(this.environment);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sessionId:");
      if (this.sessionId == null) {
        sb.append("null");
      } else {
        sb.append(this.sessionId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (subject == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'subject' was not present! Struct: " + toString());
      }
      if (resource == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'resource' was not present! Struct: " + toString());
      }
      if (action == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'action' was not present! Struct: " + toString());
      }
      if (environment == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'environment' was not present! Struct: " + toString());
      }
      if (sessionId == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'sessionId' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDecisionByAttributes_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getDecisionByAttributes_argsStandardScheme getScheme() {
        return new getDecisionByAttributes_argsStandardScheme();
      }
    }

    private static class getDecisionByAttributes_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getDecisionByAttributes_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDecisionByAttributes_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SUBJECT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.subject = iprot.readString();
                struct.setSubjectIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // RESOURCE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.resource = iprot.readString();
                struct.setResourceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ACTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.action = iprot.readString();
                struct.setActionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ENVIRONMENT
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.environment = new java.util.ArrayList<java.lang.String>(_list0.size);
                  @org.apache.thrift.annotation.Nullable java.lang.String _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = iprot.readString();
                    struct.environment.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setEnvironmentIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // SESSION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.sessionId = iprot.readString();
                struct.setSessionIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDecisionByAttributes_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.subject != null) {
          oprot.writeFieldBegin(SUBJECT_FIELD_DESC);
          oprot.writeString(struct.subject);
          oprot.writeFieldEnd();
        }
        if (struct.resource != null) {
          oprot.writeFieldBegin(RESOURCE_FIELD_DESC);
          oprot.writeString(struct.resource);
          oprot.writeFieldEnd();
        }
        if (struct.action != null) {
          oprot.writeFieldBegin(ACTION_FIELD_DESC);
          oprot.writeString(struct.action);
          oprot.writeFieldEnd();
        }
        if (struct.environment != null) {
          oprot.writeFieldBegin(ENVIRONMENT_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.environment.size()));
            for (java.lang.String _iter3 : struct.environment)
            {
              oprot.writeString(_iter3);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.sessionId != null) {
          oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
          oprot.writeString(struct.sessionId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDecisionByAttributes_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getDecisionByAttributes_argsTupleScheme getScheme() {
        return new getDecisionByAttributes_argsTupleScheme();
      }
    }

    private static class getDecisionByAttributes_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getDecisionByAttributes_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDecisionByAttributes_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        oprot.writeString(struct.subject);
        oprot.writeString(struct.resource);
        oprot.writeString(struct.action);
        {
          oprot.writeI32(struct.environment.size());
          for (java.lang.String _iter4 : struct.environment)
          {
            oprot.writeString(_iter4);
          }
        }
        oprot.writeString(struct.sessionId);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDecisionByAttributes_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.subject = iprot.readString();
        struct.setSubjectIsSet(true);
        struct.resource = iprot.readString();
        struct.setResourceIsSet(true);
        struct.action = iprot.readString();
        struct.setActionIsSet(true);
        {
          org.apache.thrift.protocol.TList _list5 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
          struct.environment = new java.util.ArrayList<java.lang.String>(_list5.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _elem6;
          for (int _i7 = 0; _i7 < _list5.size; ++_i7)
          {
            _elem6 = iprot.readString();
            struct.environment.add(_elem6);
          }
        }
        struct.setEnvironmentIsSet(true);
        struct.sessionId = iprot.readString();
        struct.setSessionIdIsSet(true);
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getDecisionByAttributes_result implements org.apache.thrift.TBase<getDecisionByAttributes_result, getDecisionByAttributes_result._Fields>, java.io.Serializable, Cloneable, Comparable<getDecisionByAttributes_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDecisionByAttributes_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField EE_FIELD_DESC = new org.apache.thrift.protocol.TField("ee", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getDecisionByAttributes_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getDecisionByAttributes_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String success; // required
    public @org.apache.thrift.annotation.Nullable EntitlementException ee; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EE((short)1, "ee");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EE
            return EE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EE, new org.apache.thrift.meta_data.FieldMetaData("ee", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, EntitlementException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDecisionByAttributes_result.class, metaDataMap);
    }

    public getDecisionByAttributes_result() {
    }

    public getDecisionByAttributes_result(
      java.lang.String success,
      EntitlementException ee)
    {
      this();
      this.success = success;
      this.ee = ee;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDecisionByAttributes_result(getDecisionByAttributes_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetEe()) {
        this.ee = new EntitlementException(other.ee);
      }
    }

    public getDecisionByAttributes_result deepCopy() {
      return new getDecisionByAttributes_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ee = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getSuccess() {
      return this.success;
    }

    public getDecisionByAttributes_result setSuccess(@org.apache.thrift.annotation.Nullable java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public EntitlementException getEe() {
      return this.ee;
    }

    public getDecisionByAttributes_result setEe(@org.apache.thrift.annotation.Nullable EntitlementException ee) {
      this.ee = ee;
      return this;
    }

    public void unsetEe() {
      this.ee = null;
    }

    /** Returns true if field ee is set (has been assigned a value) and false otherwise */
    public boolean isSetEe() {
      return this.ee != null;
    }

    public void setEeIsSet(boolean value) {
      if (!value) {
        this.ee = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      case EE:
        if (value == null) {
          unsetEe();
        } else {
          setEe((EntitlementException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EE:
        return getEe();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EE:
        return isSetEe();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof getDecisionByAttributes_result)
        return this.equals((getDecisionByAttributes_result)that);
      return false;
    }

    public boolean equals(getDecisionByAttributes_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ee = true && this.isSetEe();
      boolean that_present_ee = true && that.isSetEe();
      if (this_present_ee || that_present_ee) {
        if (!(this_present_ee && that_present_ee))
          return false;
        if (!this.ee.equals(that.ee))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEe()) ? 131071 : 524287);
      if (isSetEe())
        hashCode = hashCode * 8191 + ee.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getDecisionByAttributes_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetEe(), other.isSetEe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ee, other.ee);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getDecisionByAttributes_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ee:");
      if (this.ee == null) {
        sb.append("null");
      } else {
        sb.append(this.ee);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDecisionByAttributes_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getDecisionByAttributes_resultStandardScheme getScheme() {
        return new getDecisionByAttributes_resultStandardScheme();
      }
    }

    private static class getDecisionByAttributes_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getDecisionByAttributes_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDecisionByAttributes_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ee = new EntitlementException();
                struct.ee.read(iprot);
                struct.setEeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDecisionByAttributes_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ee != null) {
          oprot.writeFieldBegin(EE_FIELD_DESC);
          struct.ee.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDecisionByAttributes_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getDecisionByAttributes_resultTupleScheme getScheme() {
        return new getDecisionByAttributes_resultTupleScheme();
      }
    }

    private static class getDecisionByAttributes_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getDecisionByAttributes_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDecisionByAttributes_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetEe()) {
          struct.ee.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDecisionByAttributes_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ee = new EntitlementException();
          struct.ee.read(iprot);
          struct.setEeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
